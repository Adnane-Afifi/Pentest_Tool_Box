import csv
import prettytable
import os
import pdfkit
import colorama


def GetAllCreds():
    reportDir = 'reports'
    htmlContent = f"""<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Rapport de pentest</title>
        <style>
            body {{
                padding: 0px;
                margin: 0px;
                margin-top: -25px;
                font-family: Arial, Helvetica, sans-serif;
            }}
            #logins-title {{
                padding: 20px;
                font-size: 2em;
                font-weight: bold;
            }}
            #title-container {{
                padding-top: 20px;
                padding-left: 20px;
                background-color: #327dbf;
                display: flex;
                align-items: center;
            }}
            p {{
                padding-left: 10px;
            }}
            #logins-id {{
                color: black;
                font-size: 1.2em;
                font-weight: bold;
            }}
            #logins-description {{
                color: black;
                font-size: 1.2em;
                font-weight: normal;
                padding-left: 15%;
            }}
            #logins-list p {{
                margin-bottom: 5px;
                border-bottom: solid black 1px;
            }}
            #logins-header {{
                display: flex;
            }}
            #logins-header a {{
                flex-align: space-between;
                padding-right: 200px;
                font-size: 1.8em;
            }}
            img {{
                width: 100px;
            }}
        </style>
    </head>
    <body>
        <div id="title-container">
            <img src="file://{os.path.abspath('files/supdevinci.jpg')}" alt="supdevinci logo">   
            <h1 id="logins-title">Rapport des logins par défaut</h1>
        </div>
        <div id="logins-list"><p id="logins-header" style="font-weight: bold"><a>Vendeur</a><a>Logins par défaut</a></p>"""

    # cette boucle permet à l'utilisateur de choisir s'il veut un rapport en page web ou en pdf
    while True:
        pdfOrHtml = str(input("Souhaitez vous un rapport en page html ou en pdf ? (1. HTML / 2. PDF) : "))
        if pdfOrHtml == '1' or pdfOrHtml == '2':
            break
        else:
            print(colorama.Fore.YELLOW + "Veuillez choisir 1 ou 2 !" + colorama.Style.RESET_ALL)
            continue

    # Créé un objet prettytable.PrettyTable()
    table = prettytable.PrettyTable()
    with open('files/credentials.csv', 'r') as f:
        # Créé un lecteur de CSV
        reader = csv.reader(f)
        # Récupère les en-têtes de colonne du fichier CSV
        headers = next(reader)
        # Défini les en-têtes de colonne de la table
        table.field_names = headers
        for row in reader:
            # Ajoute chaque ligne à la table
            # table.add_row(row)
            htmlContent += f"<p><a id=\"logins-id\">{row[0]}</a> <a id=\"logins-description\">{row[1]} : {row[2]}</a></p>"
        htmlContent += "</div></body></html>"  # termine la page html après la boucle for

    if pdfOrHtml == '1':
        # créer le dossier contenant les documents s'il n'existe pas
        if not os.path.exists(reportDir):
            os.makedirs(reportDir)
        with open("reports/logins.html", "w") as file:
            file.write(htmlContent)
            file.close()
    else:
        if not os.path.exists(reportDir):
            os.makedirs(reportDir)
        # conversion du code html en document pdf à l'aide du module pdfkit
        pdfkit.from_string(htmlContent, 'reports/logins.pdf', options={"--enable-local-file-access": None})
    # print(table)


def SearchCreds():
    productName = input("Quel Vendeur cherchez vous ? : ")

    reportDir = 'reports'
    htmlContent = f"""<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Rapport de pentest</title>
        <style>
            body {{
                padding: 0px;
                margin: 0px;
                margin-top: -25px;
                font-family: Arial, Helvetica, sans-serif;
            }}
            #logins-title {{
                padding: 20px;
                font-size: 2em;
                font-weight: bold;
            }}
            #title-container {{
                padding-top: 20px;
                padding-left: 20px;
                background-color: #327dbf;
                display: flex;
                align-items: center;
            }}
            p {{
                padding-left: 10px;
            }}
            #logins-id {{
                color: black;
                font-size: 1.2em;
                font-weight: bold;
            }}
            #logins-description {{
                color: black;
                font-size: 1.2em;
                font-weight: normal;
                padding-left: 15%;
            }}
            #logins-list p {{
                margin-bottom: 5px;
                border-bottom: solid black 1px;
            }}
            #logins-header {{
                display: flex;
            }}
            #logins-header a {{
                flex-align: space-between;
                padding-right: 200px;
                font-size: 1.8em;
            }}
            img {{
                width: 100px;
            }}
        </style>
    </head>
    <body>
        <div id="title-container">
            <img src="file://{os.path.abspath('files/supdevinci.jpg')}" alt="supdevinci logo">   
            <h1 id="logins-title">Rapport des logins par défaut</h1>
        </div>
        <div id="logins-list"><p id="logins-header" style="font-weight: bold"><a>Vendeur</a><a>Logins par défaut</a></p>"""

    # cette boucle permet à l'utilisateur de choisir s'il veut un rapport en page web ou en pdf
    while True:
        pdfOrHtml = str(input("Souhaitez vous un rapport en page html ou en pdf ? (1. HTML / 2. PDF) : "))
        if pdfOrHtml == '1' or pdfOrHtml == '2':
            break
        else:
            print(colorama.Fore.YELLOW + "Veuillez choisir 1 ou 2 !" + colorama.Style.RESET_ALL)
            continue

    # Créé un objet prettytable.PrettyTable()
    table = prettytable.PrettyTable()
    with open('files/credentials.csv', 'r') as f:
        # Créé un lecteur de CSV
        reader = csv.reader(f)
        # Récupère les en-têtes de colonne du fichier CSV
        headers = next(reader)
        # Défini les en-têtes de colonne de la table
        table.field_names = headers
        for row in reader:
            if productName.upper() in str(row).upper():
                # Ajoute chaque ligne à la table
                #table.add_row(row)
                print(row)
                htmlContent += f"<p><a id=\"logins-id\">{row[0]}</a> <a id=\"logins-description\">{row[1]} : {row[2]}</a></p>"
            htmlContent += "</div></body></html>"  # termine la page html après la boucle for

    if pdfOrHtml == '1':
        # créer le dossier contenant les documents s'il n'existe pas
        if not os.path.exists(reportDir):
            os.makedirs(reportDir)
        with open("reports/logins.html", "w") as file:
            file.write(htmlContent)
            file.close()
    else:
        if not os.path.exists(reportDir):
            os.makedirs(reportDir)
        # conversion du code html en document pdf à l'aide du module pdfkit
        pdfkit.from_string(htmlContent, 'reports/logins.pdf', options={"--enable-local-file-access": None})
    #print(table)


def main():
    GetAllCreds()


if __name__ == '__main__':
    main()
