#!/usr/bin/env python3

from bs4 import BeautifulSoup
import colorama
import requests
import pdfkit
import os


def SearchExploit():
    reportDir = 'reports'
    buf = ''

    # variable contenant le contenu formaté de la page html pour le rapport
    htmlContent = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport de pentest</title>
    <style>
        body {{
            padding: 0px;
            margin: 0px;
            margin-top: -25px;
            font-family: Arial, Helvetica, sans-serif;
        }}
        #cve-title {{
            padding: 20px;
            font-size: 2em;
            font-weight: bold;
        }}
        #title-container {{
            padding-top: 20px;
            padding-left: 20px;
            background-color: #327dbf;
            display: flex;
            align-items: center;
        }}
        p {{
            padding-left: 10px;
        }}
        #cve-id {{
            color: black;
            font-size: 1.2em;
            font-weight: bold;
        }}
        #cve-description {{
            color: black;
            font-size: 1.2em;
            font-weight: normal;
        }}
        #cve-list p {{
            margin-bottom: 5px;
            border-bottom: solid black 1px;
        }}
        #cve-header {{
            display: flex;
        }}
        #cve-header a {{
            flex-align: space-between;
            padding-right: 200px;
            font-size: 1.8em;
        }}
        img {{
            width: 100px;
        }}
    </style>
</head>
<body>
    <div id="title-container">
        <img src="file://{os.path.abspath('files/supdevinci.jpg')}" alt="supdevinci logo">   
        <h1 id="cve-title">Rapport des CVE</h1>
    </div>
    <div id="cve-list"><p id="cve-header" style="font-weight: bold"><a>CVE ID</a><a>Description de la CVE</a></p>"""

    product = input("Nom du produit que vous cherchez : ")
    version = input("Version du produit (laisser vide si inconnue) : ")

    # cette boucle permet à l'utilisateur de choisir s'il veut un rapport en page web ou en pdf
    while True:
        pdfOrHtml = str(input("Souhaitez vous un rapport en page html ou en pdf ? (1. HTML / 2. PDF) : "))
        if pdfOrHtml == '1' or pdfOrHtml == '2':
            break
        else:
            print(colorama.Fore.YELLOW + "Veuillez choisir 1 ou 2 !" + colorama.Style.RESET_ALL)
            continue

    url = f"https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword={product}+{version}"
    headers = {'User-Agent': 'Mozilla/5.0 (compatible; MSIE 11.0; Windows NT 5.0; Trident/5.0)'}
    try:
        # variable permettant d'effectuer une requête sur le site cve.mitre.org afin de chercher les CVE d'un logiciel donné
        # le header est obligatoire car si l'on a pas d'user agent la requête ne retourne rien
        req = requests.get(url, headers=headers)

        # si la requête est bien passée (code 200) nous scrappons ce qui est retourné
        if req.status_code == 200:
            soup = BeautifulSoup(req.content, "html.parser") # récupère le contenu de la requête et parse le contenu avec le parser de bs4
            divTag = soup.findAll('div', id='TableWithRules') # cherche toutes les div ayant pour id "TableWithRules" qui sont les div contenant les CVE
            # pour tout ce qui est contenu dans la/les div nous les parcourons entièrement
            for tag in divTag:
                divTag = tag.findAll('td', {'valign': 'top'}) # permet de trouver les td contenant avec le paramètre {'valign': 'top'} car c'est la que sont les CVE
                # cette boucle parcours tout ce qui a été récupéré et le formate pour le mettre dans une liste ordonnée
                for i in divTag:
                    buf += f"{i.text}§"
                    temp = str(buf).replace('\n', '')
                    exploitTable = temp.split('§')
            # cette boucle lit la liste ordonnée et formate le tout pour ajouter une ligne par CVE sur la page html
            for j in range(0, len(exploitTable) - 1, 2):
                htmlContent += f"<p><a id=\"cve-id\">{exploitTable[j]} : </a><a id=\"cve-description\">{exploitTable[j+1]}</a></p>"
            htmlContent += "</div></body></html>" # termine la page html après la boucle for

            # permet de créer la page html ou le document pdf en fonction du choix de l'utilisateur
            if pdfOrHtml == '1':
                # créer le dossier contenant les documents s'il n'existe pas
                if not os.path.exists(reportDir):
                    os.makedirs(reportDir)
                with open("reports/cveoutput.html", "w") as file:
                    file.write(htmlContent)
                    file.close()
            else:
                if not os.path.exists(reportDir):
                    os.makedirs(reportDir)
                # conversion du code html en document pdf à l'aide du module pdfkit
                wkhtmltopdf_path = r'C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe'
                config = pdfkit.configuration(wkhtmltopdf=wkhtmltopdf_path)
                pdfkit.from_string(htmlContent, 'reports/cveoutput.pdf', configuration=config, options={"--enable-local-file-access": None})
        # si la requête n'est pas passée (code autre que 200) nous le signalons
        else:
            print(colorama.Fore.RED + "Il y a eu une erreur lors de la requête" + colorama.Style.RESET_ALL)
    # Cette ligne permet d'afficher l'erreur qu'il y a eu
    except Exception as e:
        print(colorama.Fore.RED + f"Il y a eu une erreur qui est : {e}" + colorama.Style.RESET_ALL)


def main():
    SearchExploit()


if __name__ == '__main__':
    main()
