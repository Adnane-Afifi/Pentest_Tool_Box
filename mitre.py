import attackcti
import pandas
import json
import os

import logging
logging.getLogger('taxii2client').setLevel(logging.CRITICAL) # log les évènement critiques de taxii2-client



def GetAllTechniques():
    reportDir = 'reports'

    # variable contenant le contenu formaté de la page html pour le rapport
    htmlContent = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport de pentest</title>
    <style>
        body {{
            padding: 0px;
            margin: 0px;
            margin-top: -25px;
            font-family: Arial, Helvetica, sans-serif;
        }}
        #tech-title {{
            padding: 20px;
            font-size: 2em;
            font-weight: bold;
        }}
        #title-container {{
            padding-top: 20px;
            padding-left: 20px;
            background-color: #327dbf;
            display: flex;
            align-items: center;
        }}
        p {{
            padding-left: 10px;
        }}
        #tech-name {{
            color: black;
            font-size: 1.2em;
            font-weight: bold;
        }}
        #tech-description {{
            color: black;
            font-size: 1.2em;
            font-weight: normal;
        }}
        #tech-list p {{
            margin-bottom: 5px;
        }}
        #tech-header {{
            display: flex;
        }}
        #tech-header a {{
            flex-align: space-between;
            padding-right: 200px;
            font-size: 1.8em;
        }}
        img {{
            width: 100px;
        }}
    </style>
</head>
<body>
    <div id="title-container">
        <img src="{os.path.abspath('files/supdevinci.png')}" alt="supdevinci logo">   
        <h1 id="tech-title">Rapport des techniques</h1>
    </div>
    <div id="tech-list"><p id="tech-header" style="font-weight: bold"><a>Nom de la technique</a><a>Description de la technique</a></p>"""

    lift = attackcti.attack_client() # initialise le client
    techniques = lift.get_techniques() # récupère toutes les techniques du framework ATT&CK
    print(f"Number of techniques in ATT&CK : {len(techniques)}") # affiche le nombre de techniques récupérées
    all_techniques = [] # initialise une liste vide qui contiendra toutes les techniques

    # boucle permettant d'ajouter chaque technique récupérée à la liste all_techniques
    for t in techniques:
        all_techniques.append(json.loads(t.serialize()))
    df = pandas.json_normalize(all_techniques)

    # boucle permettant de formater la page html en ajoutant le nom ainsi que la description de la technique
    for j in range(0, len(techniques), 1):
        htmlContent += f"<p><a id=\"tech-name\">{techniques[j].name} : </a><a id=\"tech-description\">{techniques[j].description}</a></p>"
        htmlContent += "</div></body></html>"

    # permet de créer le dossier contenant les fichier de sortie s'il n'existe pas
    if not os.path.exists(reportDir):
        os.makedirs(reportDir)
    with open("reports/techoutput.html", "w") as file:
        file.write(htmlContent)
        file.close()


def main():
    GetAllTechniques()


if __name__ == '__main__':
    main()
