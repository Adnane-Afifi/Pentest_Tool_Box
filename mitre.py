import attackcti
import json
import os

import logging
logging.getLogger('taxii2client').setLevel(logging.CRITICAL) # log les évènements critiques de taxii2-client


def GetAllTechniques():
    reportDir = 'reports'

    # variable contenant le contenu formaté de la page html pour le rapport
    htmlContent = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport de pentest</title>
    <style>
        body {{
            padding: 0px;
            margin: 0px;
            margin-top: -25px;
            font-family: Arial, Helvetica, sans-serif;
        }}
        #tech-title {{
            padding: 20px;
            font-size: 2em;
            font-weight: bold;
        }}
        #title-container {{
            padding-top: 20px;
            padding-left: 20px;
            background-color: #327dbf;
            display: flex;
            align-items: center;
        }}
        p {{
            padding-left: 10px;
        }}
        #tech-name {{
            color: black;
            font-size: 1.2em;
            font-weight: bold;
        }}
        #tech-description {{
            color: black;
            font-size: 1.2em;
            font-weight: normal;
        }}
        #tech-list p {{
            margin-bottom: 5px;
        }}
        #tech-header {{
            display: flex;
        }}
        #tech-header a {{
            flex-align: space-between;
            padding-right: 200px;
            font-size: 1.8em;
        }}
        img {{
            width: 100px;
        }}
    </style>
</head>
<body>
    <div id="title-container">
        <img src="file://{os.path.abspath('files/supdevinci.jpg')}" alt="supdevinci logo">   
        <h1 id="tech-title">Rapport des techniques</h1>
    </div>
    <div id="tech-list"><p id="tech-header" style="font-weight: bold; border-bottom: 1px solid black"><a>Nom de la technique</a><a>Description de la technique</a></p>"""

    lift = attackcti.attack_client() # initialise le client
    techniques = lift.get_techniques() # récupère toutes les techniques du framework ATT&CK
    print(f"Number of techniques in ATT&CK : {len(techniques)}") # affiche le nombre de techniques récupérées
    all_techniques = [] # initialise une liste vide qui contiendra toutes les techniques

    # boucle permettant d'ajouter chaque technique récupérée à la liste all_techniques
    for t in techniques:
        all_techniques.append(json.loads(t.serialize()))

    # boucle permettant de formater la page html en ajoutant le nom ainsi que la description de la technique
    for i in range(0, len(techniques), 1):
        htmlContent += f"<p style=\"border-bottom: 1px solid black;\"><a id=\"tech-name\">{techniques[i].name} : </a><a id=\"tech-description\">{techniques[i].description}</a></p>"
        htmlContent += "</div></body></html>"

    # permet de créer le dossier contenant les fichiers de sortie s'il n'existe pas
    if not os.path.exists(reportDir):
        os.makedirs(reportDir)
    with open("reports/mitreattack.html", "w", encoding="utf-8") as file:
        file.write(htmlContent)
        file.close()


def GetAllGroups():
    reportDir = 'reports'

    # variable contenant le contenu formaté de la page html pour le rapport
    htmlContent = f"""<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Rapport de pentest</title>
        <style>
            body {{
                padding: 0px;
                margin: 0px;
                margin-top: -25px;
                font-family: Arial, Helvetica, sans-serif;
            }}
            #group-title {{
                padding: 20px;
                font-size: 2em;
                font-weight: bold;
            }}
            #title-container {{
                padding-top: 20px;
                padding-left: 20px;
                background-color: #327dbf;
                display: flex;
                align-items: center;
            }}
            p {{
                padding-left: 10px;
            }}
            #group-name {{
                color: black;
                font-size: 1.2em;
                font-weight: bold;
            }}
            #group-description {{
                color: black;
                font-size: 1.2em;
                font-weight: normal;
            }}
            #group-list p {{
                margin-bottom: 5px;
            }}
            #group-header {{
                display: flex;
            }}
            #group-header a {{
                flex-align: space-between;
                padding-right: 200px;
                font-size: 1.8em;
            }}
            img {{
                width: 100px;
            }}
        </style>
    </head>
    <body>
        <div id="title-container">
            <img src="file://{os.path.abspath('files/supdevinci.jpg')}" alt="supdevinci logo">   
            <h1 id="group-title">Rapport des groupes</h1>
        </div>
        <div id="group-list"><p id="group-header" style="font-weight: bold; border-bottom: 1px solid black"><a>Nom du groupe</a></p>"""
    lift = attackcti.attack_client() # initialise le client
    groups = lift.get_groups() # récupère tous les groupes du framework ATT&CK
    print(f"Number of groups in ATT&CK : {len(groups)}") # affiche le nombre de groupes récupérés
    all_groups = [] # initialise une liste vide qui contiendra tous les groupes

    for t in groups:
        all_groups.append(json.loads(t.serialize()))

    # boucle permettant de formater la page html
    for i in range(0, len(groups), 1):
        htmlContent += f"<p><a id=\"group-name\">{groups[i].name}</a></p>"
        htmlContent += "</div></body></html>"

    # permet de créer le dossier contenant les fichiers de sortie s'il n'existe pas
    if not os.path.exists(reportDir):
        os.makedirs(reportDir)
    with open("reports/mitreattack.html", "w", encoding="utf-8") as file:
        file.write(htmlContent)
        file.close()


def GetAllSoftwares():
    reportDir = 'reports'

    # variable contenant le contenu formaté de la page html pour le rapport
    htmlContent = f"""<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Rapport de pentest</title>
        <style>
            body {{
                padding: 0px;
                margin: 0px;
                margin-top: -25px;
                font-family: Arial, Helvetica, sans-serif;
            }}
            #software-title {{
                padding: 20px;
                font-size: 2em;
                font-weight: bold;
            }}
            #title-container {{
                padding-top: 20px;
                padding-left: 20px;
                background-color: #327dbf;
                display: flex;
                align-items: center;
            }}
            p {{
                padding-left: 10px;
            }}
            #software-name {{
                color: black;
                font-size: 1.2em;
                font-weight: bold;
            }}
            #software-description {{
                color: black;
                font-size: 1.2em;
                font-weight: normal;
            }}
            #software-list p {{
                margin-bottom: 5px;
            }}
            #software-header {{
                display: flex;
            }}
            #software-header a {{
                flex-align: space-between;
                padding-right: 200px;
                font-size: 1.8em;
            }}
            img {{
                width: 100px;
            }}
        </style>
    </head>
    <body>
        <div id="title-container">
            <img src="file://{os.path.abspath('files/supdevinci.jpg')}" alt="supdevinci logo">   
            <h1 id="software-title">Rapport des logiciels</h1>
        </div>
        <div id="software-list"><p id="software-header" style="font-weight: bold; border-bottom: 1px solid black"><a>Nom du logiciel</a></p>"""
    lift = attackcti.attack_client() # initialise le client
    softwares = lift.get_software() # récupère tous les logiciels du framework ATT&CK
    print(f"Number of software in ATT&CK : {len(softwares)}") # affiche le nombre de logiciels récupérés
    all_softwares = [] # initialise une liste vide qui contiendra tous les logiciels

    # boucle permettant de formater la page html
    for i in range(0, len(softwares), 1):
        htmlContent += f"<p><a id=\"software-name\">{softwares[i].name}</a></p>"
        htmlContent += "</div></body></html>"

    # permet de créer le dossier contenant les fichiers de sortie s'il n'existe pas
    if not os.path.exists(reportDir):
        os.makedirs(reportDir)
    with open("reports/mitreattack.html", "w", encoding="utf-8") as file:
        file.write(htmlContent)
        file.close()


def GetGroupsTechniques():
    reportDir = 'reports'
    groupName = input("De quel groupe voulez-vous chercher les techniques ? (veillez à bien orthographier le nom) : ")

    # variable contenant le contenu formaté de la page html pour le rapport
    htmlContent = f"""<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Rapport de pentest</title>
        <style>
            body {{
                padding: 0px;
                margin: 0px;
                margin-top: -25px;
                font-family: Arial, Helvetica, sans-serif;
            }}
            #tech-title {{
                padding: 20px;
                font-size: 2em;
                font-weight: bold;
            }}
            #title-container {{
                padding-top: 20px;
                padding-left: 20px;
                background-color: #327dbf;
                display: flex;
                align-items: center;
            }}
            p {{
                padding-left: 10px;
            }}
            #tech-name {{
                color: black;
                font-size: 1.2em;
                font-weight: bold;
            }}
            #tech-description {{
                color: black;
                font-size: 1.2em;
                font-weight: normal;
            }}
            #tech-list p {{
                margin-bottom: 5px;
            }}
            #tech-header {{
                display: flex;
            }}
            #tech-header a {{
                flex-align: space-between;
                padding-right: 200px;
                font-size: 1.8em;
            }}
            img {{
                width: 100px;
            }}
        </style>
    </head>
    <body>
        <div id="title-container">
            <img src="file://{os.path.abspath('files/supdevinci.jpg')}" alt="supdevinci logo">   
            <h1 id="tech-title">Rapport des techniques utilisées par le groupe {groupName}</h1>
        </div>
        <div id="tech-list"><p id="tech-header" style="font-weight: bold; border-bottom: 1px solid black"><a>Nom de la technique</a><a>Description de la technique</a></p>"""

    lift = attackcti.attack_client()  # initialise le client
    groups = lift.get_groups() # récupère les groupes

    # boucle parcourant la liste des groupes jusqu'à trouver celui voulu
    for i in range(0, len(groups), 1):
        if str(groups[i].name).upper() == groupName.upper():
            oneGroup = groups[i]
            groupsTechniques = lift.get_techniques_used_by_group(oneGroup) # récupère les techniques du groupe
            for j in range(0, len(groupsTechniques), 1):
                htmlContent += f"<p style=\"border-bottom: 1px solid black;\"><a id=\"tech-name\">{groupsTechniques[j].name} : </a><a id=\"tech-description\">{groupsTechniques[j].description}</a></p>"
                htmlContent += "</div></body></html>"
            break

    # permet de créer le dossier contenant les fichiers de sortie s'il n'existe pas
    if not os.path.exists(reportDir):
        os.makedirs(reportDir)
    with open("reports/mitreattack.html", "w", encoding="utf-8") as file:
        file.write(htmlContent)
        file.close()


def GetGroupsSoftwares():
    reportDir = 'reports'
    groupName = input("De quel groupe voulez-vous chercher les techniques ? (veillez à bien orthographier le nom) : ")

    # variable contenant le contenu formaté de la page html pour le rapport
    htmlContent = f"""<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Rapport de pentest</title>
        <style>
            body {{
                padding: 0px;
                margin: 0px;
                margin-top: -25px;
                font-family: Arial, Helvetica, sans-serif;
            }}
            #soft-title {{
                padding: 20px;
                font-size: 2em;
                font-weight: bold;
            }}
            #title-container {{
                padding-top: 20px;
                padding-left: 20px;
                background-color: #327dbf;
                display: flex;
                align-items: center;
            }}
            p {{
                padding-left: 10px;
            }}
            #soft-name {{
                color: black;
                font-size: 1.2em;
                font-weight: bold;
            }}
            #soft-description {{
                color: black;
                font-size: 1.2em;
                font-weight: normal;
            }}
            #soft-list p {{
                margin-bottom: 5px;
            }}
            #soft-header {{
                display: flex;
            }}
            #soft-header a {{
                flex-align: space-between;
                padding-right: 200px;
                font-size: 1.8em;
            }}
            img {{
                width: 100px;
            }}
        </style>
    </head>
    <body>
        <div id="title-container">
            <img src="file://{os.path.abspath('files/supdevinci.jpg')}" alt="supdevinci logo">   
            <h1 id="soft-title">Rapport des logiciels utilisés par le groupe {groupName}</h1>
        </div>
        <div id="soft-list"><p id="soft-header" style="font-weight: bold; border-bottom: 1px solid black"><a>Nom du logiciel</a><a>Description du logiciel</a></p>"""

    lift = attackcti.attack_client()  # initialise le client
    groups = lift.get_groups() # récupère les groupes

    # boucle parcourant la liste des groupes jusqu'à trouver celui voulu
    for i in range(0, len(groups), 1):
        if str(groups[i].name).upper() == groupName.upper():
            oneGroup = groups[i]
            groupsTechniques = lift.get_software_used_by_group(oneGroup) # récupère les techniques du groupe
            for j in range(0, len(groupsTechniques), 1):
                htmlContent += f"<p style=\"border-bottom: 1px solid black;\"><a id=\"soft-name\">{groupsTechniques[j].name} : </a><a id=\"soft-description\">{groupsTechniques[j].description}</a></p>"
                htmlContent += "</div></body></html>"
            break

    # permet de créer le dossier contenant les fichiers de sortie s'il n'existe pas
    # permet de créer le dossier contenant les fichiers de sortie s'il n'existe pas
    if not os.path.exists(reportDir):
        os.makedirs(reportDir)
    with open("reports/mitreattack.html", "w", encoding="utf-8") as file:
        file.write(htmlContent)
        file.close()


def main():
    GetGroupsSoftwares()


if __name__ == '__main__':
    main()
