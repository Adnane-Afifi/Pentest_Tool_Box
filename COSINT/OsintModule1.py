# Baser sur Photon ///
import argparse

from Projet_Fin_Etude.Utilities.Core.colors import *

from pyfiglet import Figlet
import sys

'''
-Added handle argument of users  :
 -Setting default values of parameters: OK.
 -URL : Working ...
 -Extract internal urls : Working ...
 -Proxies : Not important (Option)
'''



keys = set()
files = set()
intel = set()
robots = set()
custom = set()
scripts = set()
external = set()
internal = set()
endpoints = set()
processed = set(['dummy'])
everything = []
bad_script = set()
bad_intel = set()

# Just a fancy ass banner
'''
Should be added in a function that switch modes /
'''
custom_banner = Figlet(font='contessa')
print(custom_banner.renderText('OSINT_S'))

'''
This function should return all the argument that was provided by the user :
//At this moment inside the function a tested the fact that we can see what the user provide us :URL
//pased_args contains all the args
'''


def handle_user_parameters(args=None):
    if args is None:
        args = sys.argv[1:]
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--url", help="root url")
    # Contains all arguments
    parsed_args = parser.parse_args(args)
    # We can remove this
    url = parsed_args.url
    if str(url).endswith('/'):
        url = url[:-1]
    else:
        quit()
    print(url)
    return parsed_args


def is_good_proxy(proxy):
    return False

    '''
    A revoir
    // Not that correct and not important
    '''


def handle_proxies(proxies):
    if handle_user_parameters().proxies:
        print("Testing proxies, can take a while ....")
        for proxy in handle_user_parameters().proxies:
            if is_good_proxy(proxy):
                proxies.append(proxy)
            else:
                print("Proxy doesn't seem to work or timout")
        print("Done.")
        if not proxies:
            print("no working proxies, quitting!")
            exit()
    else:
        proxies.append(None)

    # Define some default values for parameters:
    crawl_level = handle_user_parameters().level or 2
    number_thread = handle_user_parameters().threads or 2
    only_urls_mod = bool(handle_user_parameters().only_urls)

