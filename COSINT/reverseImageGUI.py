import tkinter as tk
import webbrowser
from tkinter import filedialog
import tkinter.messagebox
import requests
from io import BytesIO
from PIL import Image, ImageOps
import webbrowser


def reverse_image_search():
    root = tk.Tk()
    root.title("Reverse Image Search")
    root.geometry("400x200")
    root.eval('tk::PlaceWindow %s center' % root.winfo_pathname(root.winfo_id()))

    label_url = tk.Label(root, text="Enter image URL:")
    label_url.pack()
    image_url = tk.Entry(root)
    image_url.pack()

    button_file = tk.Button(root, text="Select Image", command=open_file)
    button_file.pack()

    engine = tk.StringVar(root)
    engine.set("Google")
    dropdown = tk.OptionMenu(root, engine, "Google", "Bing", "Yandex", "TinEye")
    dropdown.pack()
    print(image_url.get())
    button_search = tk.Button(root, text="Search", command=lambda: open_image_search(engine.get(), image_url.get()))
    button_search.pack()

    root.mainloop()


def open_file():
    filepath = filedialog.askopenfilename()
    return filepath


def open_image_search(engine, image_url):
    if image_url:
        image_source = image_url
    else:
        image_url = open_file()
        ext = image_url.split(".")[-1].lower()
        if ext not in ["jpeg", "jpg", "png"]:
            print("Error: Invalid image file format. Please select a JPEG or PNG image.")
            return
        image_source = "local"

    if engine == "Google":
        if image_source == "url":
            webbrowser.open(f"https://www.google.com/searchbyimage?image_url={image_url}")
        else:
            webbrowser.open(f"https://images.google.com/")
    elif engine == "Bing":
        webbrowser.open(f"https://www.bing.com/images/search?q=imgurl:{image_url}")
    elif engine == "Yandex":
        webbrowser.open(f"https://yandex.com/images/search?url={image_url}")
    elif engine == "TinEye":
        webbrowser.open(f"https://www.tineye.com/search?url={image_url}")
    else:
        print("Error: Invalid search engine")


reverse_image_search()


# def open_file():
#     file_path = tkinter.filedialog.askopenfilename(filetypes=[("Image Files", "*.jpg;*.jpeg;*.png")])
#     return file_path
#
#
# def open_image_search(engine, image_url):
#     if not image_url:
#         print("Error: Image URL not provided.")
#         return
#
#     response = requests.get(image_url)
#     image = Image.open(BytesIO(response.content))
#     reversed_image = ImageOps.invert(image)
#     reversed_image.show()
#     print("Reverse image displayed.")
#
#     if engine == "Google":
#         webbrowser.open(f"https://www.google.com/searchbyimage?image_url={image_url}")
#     else:
#         print("Error: Invalid search engine")
#
#
# class Application(tk.Frame):
#     def __init__(self, master=None):
#         super().__init__(master)
#         self.pack()
#         self.create_widgets()
#
#     def create_widgets(self):
#         self.url_entry = tk.Entry(self)
#         self.url_entry.pack()
#
#         self.open_from_url_button = tk.Button(self)
#         self.open_from_url_button["text"] = "Open from URL"
#         self.open_from_url_button["command"] = self.open_image_from_url
#         self.open_from_url_button.pack()
#
#         self.open_from_file_button = tk.Button(self)
#         self.open_from_file_button["text"] = "Open from file"
#         self.open_from_file_button["command"] = self.open_image_from_file
#         self.open_from_file_button.pack()
#
#         self.search_image_button = tk.Button(self)
#         self.search_image_button["text"] = "Search Image"
#         self.search_image_button["command"] = self.search_image
#         self.search_image_button.pack()
#
#         self.quit = tk.Button(self, text="QUIT", fg="red", command=root.destroy)
#         self.quit.pack()
#
#     def open_image_from_url(self):
#         image_url = self.url_entry.get()
#         if not image_url:
#             tkinter.messagebox.showerror("Error", "Image URL not provided.")
#             return
#
#         response = requests.get(image_url)
#         image = Image.open(BytesIO(response.content))
#         reversed_image = ImageOps.invert(image)
#         reversed_image.show()
#         tkinter.messagebox.showinfo("Information", "Reverse image displayed.")
#
#     def open_image_from_file(self):
#         file_path = open_file()
#         if not file_path:
#             tkinter.messagebox.showerror("Error", "File not selected.")
#             return
#
#         image = Image.open(file_path)
#         reversed_image = ImageOps.invert(image)
#         reversed_image.show()
#         tkinter.messagebox.showinfo("Information", "Reverse image displayed.")
#     def search_image(self):
#         engine = "Google"
#         image_url = self.url_entry.get()
#         if not image_url:
#             tkinter.messagebox.showerror("Error", "Image URL not provided.")
#             return
#         open_image_search(engine, image_url)
#
#
# root = tk.Tk()
# app = Application(master=root)
# app.mainloop()
