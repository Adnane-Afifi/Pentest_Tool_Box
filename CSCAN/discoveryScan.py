import nmap


def basic_discovery(host):

    custom_nmap = nmap.PortScanner()

    custom_nmap.scan(hosts=host, arguments='-sn')

    active_hosts = custom_nmap.all_hosts()
    html = "<html><body><table>"
    html += "<tr><th>Adresse IP </th><th>Statut</th></tr>"
    for host in active_hosts:
        status = custom_nmap[host].state()
        if status == "up":
            status = "<span style = 'color : green'>Actif</span>"
        else:
            status = "<span style='color: red>Inactif</span>"
        html += "<tr><td>{}</td><td>{}</td></tr>".format(host, status)
    html += "</table></body></html>"
    with open("hosts.html", "w") as f:
        f.write(html)


def ARP_discovery(host):
    custom_nmap = nmap.PortScanner()
    custom_nmap.scan(hosts=host, arguments='-PR -sn')
    active_hosts = custom_nmap.all_hosts()
    html = "<html><body><table>"
    html += "<tr><th>Adresse IP </th><th>Statut</th></tr>"
    for host in active_hosts:
        status = custom_nmap[host].state()
        if status == "up":
            status = "<span style = 'color : green'>Actif</span>"
        else:
            status = "<span style='color: red>Inactif</span>"
        html += "<tr><td>{}</td><td>{}</td></tr>".format(host, status)
    html += "</table></body></html>"
    with open("hosts.html", "w") as f:
        f.write(html)


def ICMP_ECHO_discovery(host):
    custom_nmap = nmap.PortScanner()
    custom_nmap.scan(hosts=host, arguments='-PE -sn')
    active_hosts = custom_nmap.all_hosts()
    html = "<html><body><table>"
    html += "<tr><th>Adresse IP </th><th>Statut</th></tr>"
    for host in active_hosts:
        status = custom_nmap[host].state()
        if status == "up":
            status = "<span style = 'color : green'>Actif</span>"
        else:
            status = "<span style='color: red>Inactif</span>"
        html += "<tr><td>{}</td><td>{}</td></tr>".format(host, status)
    html += "</table></body></html>"
    with open("hosts.html", "w") as f:
        f.write(html)


# basic_discovery("192.168.3.0/24")
