import nmap
import re
import subprocess
import logging


# logger = logging.getLogger("OS_Discovery_Logger")
# logger.setLevel(logging.INFO)
# handler = logging.FileHandler("os_detection.log")
# handler.setLevel(logging.INFO)
# formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
# handler.setFormatter(formatter)
# logger.addHandler(handler)

# TODO: Fix erreor reltaed to tthis ;  cannot use a string pattern on a bytes-like object

def nmap_os_discovery(hosts):
    custom_nmap = nmap.PortScanner()
    print("Performing nmap OS using basic OS discovery scan on " + hosts + "...")
    custom_nmap.scan(hosts, arguments="-O")
    print("Performing output parsing...")
    output = custom_nmap.get_nmap_last_output()
    print("Saving results...")
    results = {}
    for host in custom_nmap.all_hosts():
        # print(output)
        os = parse_nmap_output(output)
        results[host] = os
    print("The results are: " + str(results))
    print("Generating HTML page...")
    html = generate_html_page(results)
    print("Saving HTML page...")
    with open("os_detection_results.html", "w") as f:
        f.write(html)
    return results


def nmap_os_discovery_using_NSE(hosts):
    custom_nmap = nmap.PortScanner()
    print("Performing nmap OS using NSE script smb-os-discovery scan on " + hosts + "...")
    custom_nmap.scan(hosts=hosts, arguments="--script smb-os-discovery")
    print("Performing output parsing...")
    output = custom_nmap.get_nmap_last_output()
    results = {}
    print("Saving results...")
    for host in custom_nmap.all_hosts():
        os = parse_nmap_output(output)
        results[host] = os
    print("The results are: " + str(results))
    print("Generating HTML page...")
    html = generate_html_page(results)
    print("Saving HTML page...")
    with open("os_detection_results.html", "w") as f:
        f.write(html)
    return results


# TODO: Optional install automaticaly on the user machine or add to readme
def detect_os_based_on_ttl(host):
    print("Starting OS detection based on ttl values using traceroute...")
    traceroute_output = subprocess.run(["traceroute", "-m 1", host], capture_output=True).stdout.decode()
    ttl_values = []
    print("Parsing traceroute output...")
    for line in traceroute_output.splitlines():
        if "* * *" in line:
            continue
        ttl = int(line.split()[0])
        ttl_values.append(ttl)
    print("TTL values: " + str(ttl_values))
    ttl_os_map = {
        64: "Linux",
        128: "Windows",
        255: "Cisco",
    }
    print("Detecting OS based on ttl values...")
    most_common_ttl = max(ttl_values, key=ttl_values.count)
    os = ttl_os_map.get(most_common_ttl, "Unknown")
    print("OS based on ttl values is: " + os)
    print("Generating html page...")
    html = generate_html_page(host)
    print("Saving html page...")
    with open("os_detection_results.html", "w") as f:
        f.write(html)
    return os


def parse_nmap_output(output):
    output = output.decode()
    os_patterns = re.compile(r"Running:\s+(\S+)")
    os_match = os_patterns.search(output)
    if os_match:
        os = os_match.group(1)
        print(os)
    else:
        os = "Unknown"
    return os


def generate_html_page(results):
    html = """
           <html>
           <head>
               <title>OS Detection Results</title>
           </head>
           <body>
               <h1>OS Detection Results</h1>
               <table>
                   <tr>
                       <th>Host</th>
                       <th>Operating System</th>
                   </tr>
       """
    for host, os in results.items():
        html += """
                   <tr>
                       <td>{}</td>
                       <td>{}</td>
                   </tr>
           """.format(host, os)
    html += """
               </table>
           </body>
           </html>
       """
    return html


'''
    host = "example.com"
    nmap_output = run_nmap(host)
    os = parse_nmap_output(nmap_output)
    html = generate_html_page(os)
    print(html)
    
    host = "example.com"
    unicornscan_output = run_unicornscan(host)
    ttl_values = parse_unicornscan_output(unicornscan_output)
    os = detect_os(ttl_values)
'''
