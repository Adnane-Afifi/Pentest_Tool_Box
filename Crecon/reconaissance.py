import dns.resolver
import socket
import wmi
import requests
from scapy.all import *
from scapy.layers.inet import IP, TCP
from bs4 import BeautifulSoup
import os
import re

'''
Cette fonction trouve tout les subdomains lié a un domain
'''


def find_subdomains(domain):
    subdomains = []

    try:
        answers = dns.resolver.query(domain, 'NS')
        for data in answers:
            subdomains.append(data.target.to_text())
    except dns.resolver.NoAnswer:
        print("Aucun enregistrement NS trouvé pour le domaine" + domain)
    except dns.resolver.NXDOMAIN:
        print("Le domaine " + domain + " n'existe pas.")
    except dns.resolver.Timeout:
        print("Temps d'attente dépassé lors de la résolution " + domain)
    except Exception as e:
        print("Une erreur s'est produite :" + str(e))
    return subdomains


def find_ip_addresses(domain):
    ip_addresses = []
    try:
        ip_addresses.append(socket.gethostbyname(domain))
    except socket.gaierror:
        print("Aucune adresse IP trouvée pour le domaine" + domain)
    except Exception as e:
        print("Une erreur s'est produite: " + str(e))
    return ip_addresses


def find_open_ports(ip_address):
    open_ports = []
    for port in range(1, 65535):
        m_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        m_socket.settimeout(5)
        result = m_socket.connect_ex((ip_address, port))
        if result == 0:
            open_ports.append(port)
        m_socket.close()
    return open_ports


def search_osint(query):
    results = []
    try:
        url = "https://www.google.com/search?q=" + query + "+filetype:log"
        page = requests.get(url)
        m_soup = BeautifulSoup(page.content, "html.parser")
        links = m_soup.find_all("a")
        for link in links:
            link_href = link.get("href")
            if link_href.startswith("/url?q="):
                results.append(link_href[7:])
    except Exception as e:
        print("Une erreur s'est produite " + str(e))
    return results


def collect_system_info(target):
    try:
        wmi_request = wmi.WMI(target)
        for sys in wmi_request.Win32_OperatingSystem():
            print("Nom de l'ordinateur :", sys.CSName)
            print("Système d'exploitation :", sys.Caption)
            print("Version du système d'exploitation :", sys.Version)
            print("Architecture :", sys.OSArchitecture)
        for proc in wmi_request.Win32_Processor():
            print("Nom du processeur :", proc.Name)
            print("Nombre de coeurs :", proc.NumberOfCores)
            print("Nombre de logiques :", proc.NumberOfLogicalProcessors)
        for mem in wmi_request.Win32_PhysicalMemory():
            print("Taille de la mémoire :", mem.Capacity)
    except Exception as e:
        print("Une erreur s'est produite lors de la collecte des informations système : " + str(e))
        '''
        Recherche de données sensibles sur l'ensemble du systeme c:/
        '''


def search_sensitive_data(path):
    sensitive_data = []
    try:
        for dirpath, dirnames, filenames in os.walk(path):
            for file in filenames:
                full_path = os.path.join(dirpath, file)
                if "password" in file or "credit" in file:
                    sensitive_data.append(full_path)
    except Exception as e:
        print("Une erreur s'est produite lors de la recherche des données sensibles : " + str(e))
    return sensitive_data

#TODO : Fix wmi probelm
def search_sensitive_data_v2(path):
    sensitive_data = []
    try:
        patterns = [
            r"(?i)(username|user|login)[\s]*:[\s]*[a-zA-Z0-9]+",
            r"(?i)(password|pass)[\s]*:[\s]*[a-zA-Z0-9]+",
            r"(?i)(credit|card)[\s]*:[\s]*[0-9]+"
        ]
        for dirpath, dirnames, filenames in os.walk(path):
            for file in filenames:
                full_path = os.path.join(dirpath, file)
                if full_path.endswith(".txt"):
                    with open(full_path, "r") as f:
                        content = f.read()
                        for pattern in patterns:
                            match = re.search(pattern, content)
                            if match:
                                sensitive_data.append(full_path)
    except Exception as e:
        print("Une erreur s'est produite lors de la recherche des données sensibles : " + str(e))
    return sensitive_data


# sensitive_data = search_sensitive_data("C:\\")
# print("Données sensibles trouvées :")
# for data in sensitive_data:
#     print("- " + data)

# osint_results = search_osint("site:test.com")
# print("Résultats OSINT test.com :")
# for result in osint_results:
#     print("- " + result)

# subdomains = find_subdomains("test.com")
# for subdomain in subdomains:
#     print("-" + subdomain)

# ip_addresses = find_ip_addresses("test.com")
# for ip_address in ip_addresses:
#     print("- " + ip_address)
