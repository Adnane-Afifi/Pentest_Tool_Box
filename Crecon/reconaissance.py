import dns.resolver
import socket
import requests
from scapy.all import *
from scapy.layers.inet import IP, TCP
from bs4 import BeautifulSoup
import os
import re
import shodan
import time
import requests
import hunter

# OK
'''
Cette fonction trouve tout les subdomains lié a un domain
'''


# TODO: Add the subdomains found in an HTML page
def find_subdomains():
    domain = input("Enter the domain name : ")
    subdomains = []

    try:
        answers = dns.resolver.query(domain, 'NS')
        for data in answers:
            subdomains.append(data.target.to_text())
    except dns.resolver.NoAnswer:
        print("Aucun enregistrement NS trouvé pour le domaine" + domain)
    except dns.resolver.NXDOMAIN:
        print("Le domaine " + domain + " n'existe pas.")
    except dns.resolver.Timeout:
        print("Temps d'attente dépassé lors de la résolution " + domain)
    except Exception as e:
        print("Une erreur s'est produite :" + str(e))
    print(subdomains)
    html = "<html><body><h1>Subdomains for " + domain + "</h1><ul>"
    for subdomain in subdomains:
        html += "<li>" + subdomain + "</li>"
    html += "</ul></body></html>"
    with open("subdomains_output.html", "w") as f:
        f.write(html)
    return subdomains


def find_ip_addresses():
    domain = input("Enter the domain name : ")
    ip_addresses = []
    try:
        ip_addresses.append(socket.gethostbyname(domain))
    except socket.gaierror:
        print("Aucune adresse IP trouvée pour le domaine" + domain)
    except Exception as e:
        print("Une erreur s'est produite: " + str(e))
    print(ip_addresses)
    return ip_addresses


def find_open_ports():
    ip_address = input("Enter the IP address : ")
    open_ports = []
    for port in range(1, 65535):
        m_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        m_socket.settimeout(5)
        result = m_socket.connect_ex((ip_address, port))
        if result == 0:
            open_ports.append(port)
        m_socket.close()
    return open_ports


def search_osint():
    query = input("Enter the query : ")
    results = []
    try:
        url = "https://www.google.com/search?q=" + query + "+filetype:log"
        page = requests.get(url)
        m_soup = BeautifulSoup(page.content, "html.parser")
        links = m_soup.find_all("a")
        for link in links:
            link_href = link.get("href")
            if link_href.startswith("/url?q="):
                results.append(link_href[7:])
    except Exception as e:
        print("Une erreur s'est produite " + str(e))
    print(results)
    return results


def search_sensitive_data():
    path = input("Enter the path : ")
    sensitive_data = []
    try:
        for dirpath, dirnames, filenames in os.walk(path):
            for file in filenames:
                full_path = os.path.join(dirpath, file)
                if "password" in file or "credit" in file:
                    sensitive_data.append(full_path)
    except Exception as e:
        print("Une erreur s'est produite lors de la recherche des données sensibles : " + str(e))
    return sensitive_data


# API KEY SHODAN
# hWQTeZmHZ5yAuAajtrRaZVDzfziJLfeg
SHODAN_api = api = shodan.Shodan("hWQTeZmHZ5yAuAajtrRaZVDzfziJLfeg")


def shodan_search_term():
    search_term = input("Enter the search term : ")
    try:
        results = api.search(search_term)

        print("Results found: {}".format(results['total']))
        with open("reconnaissance_output.html", "w") as f:
            f.write("<html><head><title>Results found:".format(results['total']) + "</title></head><body>")
            for result in results['matches']:
                print(result['ip_str'])
                f.write("<p>" + result['ip_str'] + "</p>")
            f.write("</body></html>")
    except shodan.APIError as e:
        print("Error: {}".format(e))


# shodan_search_term("webcam")


# TODO: OPTIONAL : Make the page more stylich
def shodan_search_ip_address():
    ip_adress = input("Enter the IP address : ")
    try:
        # Perform a search for the specified IP address
        host = api.host(ip_adress)

        # Print the host information
        print("IP: {}".format(host['ip_str']))
        print("Organization: {}".format(host.get('org', 'n/a')))
        print("Operating System: {}".format(host.get('os', 'n/a')))
        with open("reconnaissance_output.html", "w") as f:
            f.write("<html><head><title>Reconnaissance passive output (SHODAN):</title></head><body>")
            f.write("<h1>Reconnaissance passive results</h1>")

            for item in host['data']:
                print("Port: {}".format(item['port']))
                print("Banner: {}".format(item['data']))
                f.write("<h2>Port: {}</h2>".format(item['port']))
                f.write("<p>Banner: {}</p>".format(item['data']))
            f.write("</body></html>")
    except shodan.APIError as e:
        print("Error: {}".format(e))


# shodan_search_ip_address("105.155.252.2")

HUNTER_api = "7e12fdc117c543f0727b142b90a6156a5fa15ef3"

#Instead of passing int in the parameter pass it in an input . For example : input("Enter the domain name : ")
def email_reconnaissance():
    domain = input("Enter the domain name : ")
    url = 'https://api.hunter.io/v2/domain-search?domain=' + domain + '&api_key=' + HUNTER_api
    response = requests.get(url)
    data = response.json()
    print(data)
    email_addresses = data['data']['emails']
    with open("emails_hunter.html", "w") as f:
        f.write("<html><head><title>Emails found using the following domain:".format(domain) + "</title></head><body>")
        for email in email_addresses:
            print(email['value'])
            f.write("<p>" + email['value'] + "</p>")
        f.write("</body></html>")


def email_reconnaissance_v2():
    domain = input("Enter the domain name : ")
    name = str(input("Enter the name of the person you want to find the email address of : "))
    lastname = str(input("Enter the lastname of the person you want to find the email address of : "))
    url = 'https://api.hunter.io/v2/email-finder?first_name=' + name + '&last_name=' + lastname + '&domain=' + domain + '&api_key=' + HUNTER_api
    response = requests.get(url)
    data = response.json()
    print(data)
    if 'data' in data:
        email_addresses = data['data']['email']
        with open("emails_hunter.html", "w") as f:
            f.write(
                "<html><head><title>Email found using the following domain:".format(domain) + "</title></head><body>")
            email = email_addresses
            print(email)
            f.write("<p>" + email + "</p>")
            f.write("</body></html>")
    else:
        print("No email found")


def validate_email():
    email = input("Enter the email address : ")
    url = 'https://api.hunter.io/v2/email-verifier?email=' + email + '&api_key=' + HUNTER_api
    response = requests.get(url)
    data = response.json()
    print(data)
    if data["data"]["result"] == "undeliverable":
        color = "red"
        status = "Invalid"
        print("Email : " + email + " is " + status)
    else:
        color = "green"
        status = "Valid"
        print("Email : " + email + " is " + status)
    html = f"""
        <html>
            <body>
                <p style="color: {color}">Email: {email}</p>
                <p style="color: {color}">Status: {status}</p>
            </body>
        </html>
        """
    with open("email_validation.html", "w") as f:
        f.write(html)


def author_finder():
    link = input("Enter the link : ")
    url = 'https://api.hunter.io/v2/author-finder?url=' + link + '&api_key=' + HUNTER_api
    response = requests.get(url)
    data = response.json()
    print("The author is : " + str(data['data']['first_name']) + " " + str(data['data']['last_name']))
# email_reconnaissance_v2("google.com")
# validate_email('jpeterson@google.com')
# author_finder("https://medium.com/backticks-tildes/the-s-o-l-i-d-principles-in-pictures-b34ce2f1e898")

# osint_results = search_osint("site:test.com")
# print("Résultats OSINT test.com :")
# for result in osint_results:
#     print("- " + result)

# subdomains = find_subdomains("test.com")
# for subdomain in subdomains:
#     print("-" + subdomain)

# ip_addresses = find_ip_addresses("test.com")
# for ip_address in ip_addresses:
#     print("- " + ip_address)
