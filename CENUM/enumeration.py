import socket

import nmap
import enum4linux
import subprocess

#Fix all functions to work with the new structure
def service_enumeration(target_ip: str):
    ports = [21, 22, 23, 25, 80,110, 443, 445]
    for port in ports:
        m_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        m_socket.settimeout(5)
        result = m_socket.connect(target_ip)
        if result == 0:
            print(f"Port {port} is open")
        try:
            banner = m_socket.recv(1024)
            print(f"Banner: {banner}")
        except:
            pass
        else:
            print(f"Port {port} is closed")
            # Close the socket
            m_socket.close()

    """
    This  function automates the process of service enumeration on a target system using nmap package
    """


def service_enumeration_nmap(target_ip):
    ports = "1-1024"
    m_nmap = nmap.PortScanner()
    m_nmap.scan(target_ip, ports)
    for port in m_nmap[target_ip]['tcp']:
        if m_nmap[target_ip]['tcp'][port]['state'] == 'open ':
            print(f"Port {port} is open")
            print(f"Service: {m_nmap[target_ip]['tcp'][port]['name']}")
            print(f"Product: {m_nmap[target_ip]['tcp'][port]['product']}")
            print(f"Version: {m_nmap[target_ip]['tcp'][port]['version']}")


def enum4linux_scan(target_ip):
    try:
        subprocess.run(["enum4linux", target_ip], check=True)
    except subprocess.CalledProcessError as e:
        print(f"enum4linux failed with error code {e.returncode}")


def fierce_scan(target_domain):
    try:
        subprocess.run(["fierce", "-dns", target_domain], check=True)
    except subprocess.CalledProcessError as e:
        print(f"Fierce scan failed with error code {e.returncode}")
