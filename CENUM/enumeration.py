import socket
import whois
import nmap
import requests
import socket
import enum4linux
import subprocess


# Fix all functions to work with the new structure
def service_enumeration(target_ip: str):
    ports = [21, 22, 23, 25, 80, 110, 443, 445]
    for port in ports:
        m_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        m_socket.settimeout(5)
        try:
            result = m_socket.connect((target_ip, int(port)))
        except ConnectionRefusedError:
            print("Connection refused on port %s" % (port))
        try:
            banner = m_socket.recv(1024)
            print(f"Banner: {banner}")
        except:
            pass
        else:
            print(f"Port {port} is closed")
            # Close the socket
            m_socket.close()

    """
    This  function automates the process of service enumeration on a target system using nmap package
    """


def service_enumeration_nmap(target_ip):
    ports = "1-1024"
    m_nmap = nmap.PortScanner()
    m_nmap.scan(target_ip, ports)
    for port in m_nmap[target_ip]['tcp']:
        if m_nmap[target_ip]['tcp'][port]['state'] == 'open ':
            print(f"Port {port} is open")
            print(f"Service: {m_nmap[target_ip]['tcp'][port]['name']}")
            print(f"Product: {m_nmap[target_ip]['tcp'][port]['product']}")
            print(f"Version: {m_nmap[target_ip]['tcp'][port]['version']}")


def service_detection(target_ip):
    ports = [21, 22, 23, 25, 80, 110, 443, 445]
    for port in ports:
        try:
            print("Starting service detection.....")
            s = socket.socket()
            print("Socket successfully created.....")
            s.connect(target_ip, port)
            print("Trying to conect to the socket on port %s" % (port))
            s.sendall("\r\n".encode())
            print("Sending data to the socket.....")
            version = s.recv(1024).decode()
            s.close()
            print("Service version: " + version.strip())
            return version
        except:
            print("Service version failed!")
            return


def banner_grap(ip):
    ports = [21, 22, 23, 25, 80, 110, 443, 445]
    print("Starting banner grap.....")
    for port in ports:
        print("Trying to grap banner on port %s" % (port))
        m_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        print("Socket successfully created.....")
        m_socket.settimeout(5)
        try:
            result = m_socket.connect((ip, int(port)))
        except ConnectionRefusedError:
            print("Connection refused on port %s" % (port))
        try:
            banner = m_socket.recv(1024)
            print(f"Banner: {banner}")
        except:
            pass
        finally:
            print(f"Port {port} is closed")
            # Close the socket
            m_socket.close()


# Fortmat data in html page
def whois_lookup(domain):
    print("Starting whois lookup.....")
    w = whois.whois(domain)
    print("Whois: ", w)
    print("Formatting results in html page .....")
    registrant_name = w.registrant.name if hasattr(w.registrant, 'name') else 'N/A'
    registrant_email = w.registrant.email if hasattr(w.registrant, 'email') else 'N/A'
    html = """
       <html>
       <head>
           <title>Whois Lookup Result</title>
       </head>
       <body>
           <h1>Whois Lookup Result</h1>
           <table>
               <tr>
                   <td>Domain Name:</td>
                   <td>{domain}</td>
               </tr>
               <tr>
                   <td>Registrar:</td>
                   <td>{registrar}</td>
               </tr>
               <tr>
                   <td>Creation Date:</td>
                   <td>{creation_date}</td>
               </tr>
               <tr>
                   <td>Expiration Date:</td>
                   <td>{expiration_date}</td>
               </tr>
               <tr>
                   <td>Registrant Name:</td>
                   <td>{registrant_name}</td>
               </tr>
               <tr>
                   <td>Registrant Email:</td>
                   <td>{registrant_email}</td>
               </tr>
           </table>
       </body>
       </html>
       """.format(domain=w.domain_name,
                  registrar=w.registrar,
                  creation_date=w.creation_date,
                  expiration_date=w.expiration_date,
                  registrant_name=registrant_name,
                  registrant_email=registrant_email)
    with open("whois.html", "w") as f:
        f.write(html)
    return w


def dns_enumeration(domain):
    try:
        print("Starting dns enumeration.....")
        result = socket.gethostbyname_ex(domain)
        print("Result: " + result)
        return result
    except socket.gaierror:
        print("DNS enumeration failed!")
        return None


def http_header_analysis(url):
    print("Starting http header analysis.....")
    response = requests.get(url)
    headers = response.headers
    print("Headers: ", headers)
    return headers


def ip_geolocation(ip):
    print("Starting ip geolocation.....")
    response = requests.get(f"https://ipapi.co/{ip}/json/")
    print("Response: " + response.text)
    data = response.json()
    print("Data: ", data)
    return data

# def enum4linux_scan(target_ip):
#     try:
#         subprocess.run(["enum4linux", target_ip], check=True)
#     except subprocess.CalledProcessError as e:
#         print(f"enum4linux failed with error code {e.returncode}")
#
#
# def fierce_scan(target_domain):
#     try:
#         subprocess.run(["fierce", "-dns", target_domain], check=True)
#     except subprocess.CalledProcessError as e:
#         print(f"Fierce scan failed with error code {e.returncode}")
