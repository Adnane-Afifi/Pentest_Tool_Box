import colorama
import requests
import traceback
import os
import pdfkit


def GetHiddenContent():
    reportDir = 'reports'
    htmlContent = f"""<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Rapport de pentest</title>
        <style>
            body {{
                padding: 0px;
                margin: 0px;
                margin-top: -25px;
                font-family: Arial, Helvetica, sans-serif;
            }}
            #url-title {{
                padding: 20px;
                font-size: 2em;
                font-weight: bold;
            }}
            #title-container {{
                padding-top: 20px;
                padding-left: 20px;
                background-color: #327dbf;
                display: flex;
                align-items: center;
            }}
            p {{
                padding-left: 10px;
            }}
            #url-id {{
                color: black;
                font-size: 1.2em;
                font-weight: bold;
            }}
            #url-description {{
                color: black;
                font-size: 1.2em;
                font-weight: normal;
                padding-left: 15%;
            }}
            #url-list p {{
                margin-bottom: 5px;
                border-bottom: solid black 1px;
            }}
            #url-header {{
                display: flex;
            }}
            #url-header a {{
                flex-align: space-between;
                padding-right: 200px;
                font-size: 1.8em;
            }}
            img {{
                width: 100px;
            }}
        </style>
    </head>
    <body>
        <div id="title-container">
            <img src="file://{os.path.abspath('files/supdevinci.jpg')}" alt="supdevinci logo">   
            <h1 id="url-title">Rapport des contenus</h1>
        </div>
        <div id="url-list"><p id="url-header" style="font-weight: bold"><a>URL</a></p>"""

    # cette boucle permet à l'utilisateur de choisir s'il veut un rapport en page web ou en pdf
    while True:
        pdfOrHtml = str(input("Souhaitez vous un rapport en page html ou en pdf ? (1. HTML / 2. PDF) : "))
        if pdfOrHtml == '1' or pdfOrHtml == '2':
            break
        else:
            print(colorama.Fore.YELLOW + "Veuillez choisir 1 ou 2 !" + colorama.Style.RESET_ALL)
            continue

    url = input("Quelle est l'url que vous souhaitez tester ? : ")
    # liste les fichiers dans le dossier wordlists
    wordlistsFiles = os.listdir("files/wordlists")
    # liste vide qui contiendra les noms des wordlists
    wordlistsList = []
    print("wordlists utilisables :\n")
    # boucle ajoutant le contenu du dossier wordlists dans la liste
    for wordlist in wordlistsFiles:
        wordlistsList.append(wordlist)
    # parcours la liste pour afficher les wordlists disponibles
    for i in range(0, len(wordlistsList), 1):
        print(f"\t{i + 1}. {wordlistsList[i]}")
    # choix de la wordlist à utiliser
    try:
        index = int(input("\nQuel numéro de wordlist utiliser ? : ")) - 1
        if 0 <= index < len(wordlistsList):
            wordlistUsed = wordlistsList[index]
            with open(f"files/wordlists/{wordlistUsed}", 'r') as f:
                content = f.readlines()
                # -------------------------- CHOIX SI DOSSIER OU FICHIER ----------------------------------- #
                isExtensions = input("Voulez-vous cherchez des fichiers à la place des dossiers ? Y/N : ")
                if isExtensions.upper() == 'N':
                    for keyword in content:
                        # supprime les retours à la ligne lors de la lecture du fichier
                        keyword = keyword.strip()
                        req = requests.get(url + keyword)
                        if req.status_code != 404:
                            print(f"{url}{keyword} : {req.status_code}")
                            htmlContent += f"<p><a href=\"{url}/{keyword}\" target=\"_blank\" id=\"url-id\">{url}{keyword} : {req.status_code}</a></p>"
                    htmlContent += "</div></body></html>"  # termine la page html après la boucle for
                elif isExtensions.upper() == 'Y':
                    extensions = input("Quelles extensions rechercher ? (sous la forme extension1,extension2 etc) : ")
                    extensionsList = extensions.split(',')
                    for keyword in content:
                        # supprime les retours à la ligne lors de la lecture du fichier
                        keyword = keyword.strip()
                        for i in range(0, len(extensionsList), 1):
                            req = requests.get(url + keyword + "." + extensionsList[i])
                            if req.status_code != 404:
                                print(f"{url}{keyword}.{extensionsList[i]} : {req.status_code}")
                                htmlContent += f"<p><a href=\"{url}/{keyword}.{extensionsList[i]}\" target=\"_blank\" id=\"url-id\">{url}{keyword}.{extensionsList[i]} : {req.status_code}</a></p>"
                        htmlContent += "</div></body></html>"  # termine la page html après la boucle for
                else:
                    print(colorama.Fore.YELLOW + "Veuillez choisir Y ou N !" + colorama.Style.RESET_ALL)
                # ------------------------------------------------------------------------------------------ #
                if pdfOrHtml == '1':
                    # créer le dossier contenant les documents s'il n'existe pas
                    if not os.path.exists(reportDir):
                        os.makedirs(reportDir)
                    with open("reports/urls.html", "w") as file:
                        file.write(htmlContent)
                        file.close()
                else:
                    if not os.path.exists(reportDir):
                        os.makedirs(reportDir)
                    # conversion du code html en document pdf à l'aide du module pdfkit
                    pdfkit.from_string(htmlContent, 'reports/urls.pdf', options={"--enable-local-file-access": None})
        else:
            print(colorama.Fore.RED + "Veuillez choisir un des chiffres proposé" + colorama.Style.RESET_ALL)
    except Exception:
        traceback.print_exc()


def main():
    GetHiddenContent()


if __name__ == '__main__':
    main()
